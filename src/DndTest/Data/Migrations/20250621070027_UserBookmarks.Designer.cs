// <auto-generated />
using System;
using DndTest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using Pgvector;

#nullable disable

namespace DndTest.Data.Migrations
{
    [DbContext(typeof(DndDbContext))]
    [Migration("20250621070027_UserBookmarks")]
    partial class UserBookmarks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomFieldOptionItemCustomFieldValue", b =>
                {
                    b.Property<int>("SelectedOnId")
                        .HasColumnType("integer");

                    b.Property<int>("ValuesId")
                        .HasColumnType("integer");

                    b.HasKey("SelectedOnId", "ValuesId");

                    b.HasIndex("ValuesId");

                    b.ToTable("CustomFieldOptionItemCustomFieldValue");
                });

            modelBuilder.Entity("DndTest.Data.Model.Bookmark", b =>
                {
                    b.Property<int>("BookmarkCollectionId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasKey("BookmarkCollectionId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("Bookmark");
                });

            modelBuilder.Entity("DndTest.Data.Model.BookmarkCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BookmarkCollection");
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId");

                    b.ToTable("Items");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.CustomField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomFields");
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.CustomFieldCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("integer");

                    b.Property<int>("DependsOnCustomFieldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("DependsOnCustomFieldId");

                    b.ToTable("CustomFieldCondition");
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.CustomFieldOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomFieldConditionId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldConditionId");

                    b.HasIndex("CustomFieldId");

                    b.ToTable("CustomFieldOption");
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.ItemCustomFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomFieldId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<bool?>("ValueBoolean")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ValueDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("ValueDouble")
                        .HasColumnType("double precision");

                    b.Property<string>("ValueFreeText")
                        .HasColumnType("text");

                    b.Property<int?>("ValueInteger")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("ItemId", "CustomFieldId")
                        .IsUnique();

                    b.ToTable("ItemCustomFieldValue");
                });

            modelBuilder.Entity("DndTest.Data.Model.EmbeddingCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TextHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Vector>("Vector")
                        .IsRequired()
                        .HasColumnType("vector(768)");

                    b.HasKey("Id");

                    b.HasIndex("TextHash", "Model")
                        .IsUnique();

                    b.ToTable("EmbeddingCache");
                });

            modelBuilder.Entity("DndTest.Data.Model.ExtractedText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("ExtractedText");
                });

            modelBuilder.Entity("DndTest.Data.Model.SearchChunk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Vector>("EmbeddingVector")
                        .IsRequired()
                        .HasColumnType("vector(768)");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("TextVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasComputedColumnSql("to_tsvector('english', \"SearchChunks\".\"Text\")", true);

                    b.HasKey("Id");

                    b.HasIndex("EmbeddingVector")
                        .HasAnnotation("Npgsql:StorageParameter:lists", 100);

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("EmbeddingVector"), "ivfflat");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("EmbeddingVector"), new[] { "vector_l2_ops" });

                    b.HasIndex("ItemId");

                    b.HasIndex("TextVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TextVector"), "GIN");

                    b.ToTable("SearchChunks");
                });

            modelBuilder.Entity("DndTest.Data.Model.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("DndTest.Data.Model.TikaCache", b =>
                {
                    b.Property<string>("FileHash")
                        .HasColumnType("text");

                    b.Property<string>("TikaResponseJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FileHash");

                    b.ToTable("TikaCache");
                });

            modelBuilder.Entity("DndTest.Data.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.File", b =>
                {
                    b.HasBaseType("DndTest.Data.Model.Content.Item");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("S3ObjectKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Folder", b =>
                {
                    b.HasBaseType("DndTest.Data.Model.Content.Item");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Note", b =>
                {
                    b.HasBaseType("DndTest.Data.Model.Content.Item");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Shortcut", b =>
                {
                    b.HasBaseType("DndTest.Data.Model.Content.Item");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.HasIndex("TargetId");

                    b.ToTable("Shortcuts");
                });

            modelBuilder.Entity("CustomFieldOptionItemCustomFieldValue", b =>
                {
                    b.HasOne("DndTest.Data.Model.CustomFields.ItemCustomFieldValue", null)
                        .WithMany()
                        .HasForeignKey("SelectedOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndTest.Data.Model.CustomFields.CustomFieldOption", null)
                        .WithMany()
                        .HasForeignKey("ValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DndTest.Data.Model.Bookmark", b =>
                {
                    b.HasOne("DndTest.Data.Model.BookmarkCollection", "BookmarkCollection")
                        .WithMany("Bookmarks")
                        .HasForeignKey("BookmarkCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndTest.Data.Model.Content.Item", "Item")
                        .WithMany("Bookmarks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookmarkCollection");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DndTest.Data.Model.BookmarkCollection", b =>
                {
                    b.HasOne("DndTest.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Item", b =>
                {
                    b.HasOne("DndTest.Data.Model.Content.Folder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("DndTest.Data.Model.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.CustomField", b =>
                {
                    b.HasOne("DndTest.Data.Model.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.CustomFieldCondition", b =>
                {
                    b.HasOne("DndTest.Data.Model.CustomFields.CustomField", "CustomField")
                        .WithMany("Conditions")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndTest.Data.Model.CustomFields.CustomField", "DependsOnCustomField")
                        .WithMany("DependentConditions")
                        .HasForeignKey("DependsOnCustomFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomField");

                    b.Navigation("DependsOnCustomField");
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.CustomFieldOption", b =>
                {
                    b.HasOne("DndTest.Data.Model.CustomFields.CustomFieldCondition", null)
                        .WithMany("RequiredOptions")
                        .HasForeignKey("CustomFieldConditionId");

                    b.HasOne("DndTest.Data.Model.CustomFields.CustomField", "CustomField")
                        .WithMany("Options")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomField");
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.ItemCustomFieldValue", b =>
                {
                    b.HasOne("DndTest.Data.Model.CustomFields.CustomField", "CustomField")
                        .WithMany()
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndTest.Data.Model.Content.Item", "Item")
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomField");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DndTest.Data.Model.ExtractedText", b =>
                {
                    b.HasOne("DndTest.Data.Model.Content.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("DndTest.Data.Model.SearchChunk", b =>
                {
                    b.HasOne("DndTest.Data.Model.Content.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DndTest.Data.Model.User", b =>
                {
                    b.HasOne("DndTest.Data.Model.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.File", b =>
                {
                    b.HasOne("DndTest.Data.Model.Content.Item", null)
                        .WithOne()
                        .HasForeignKey("DndTest.Data.Model.Content.File", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Folder", b =>
                {
                    b.HasOne("DndTest.Data.Model.Content.Item", null)
                        .WithOne()
                        .HasForeignKey("DndTest.Data.Model.Content.Folder", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Note", b =>
                {
                    b.HasOne("DndTest.Data.Model.Content.Item", null)
                        .WithOne()
                        .HasForeignKey("DndTest.Data.Model.Content.Note", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Shortcut", b =>
                {
                    b.HasOne("DndTest.Data.Model.Content.Item", null)
                        .WithOne()
                        .HasForeignKey("DndTest.Data.Model.Content.Shortcut", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndTest.Data.Model.Content.Item", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Target");
                });

            modelBuilder.Entity("DndTest.Data.Model.BookmarkCollection", b =>
                {
                    b.Navigation("Bookmarks");
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Item", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("CustomFieldValues");
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.CustomField", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("DependentConditions");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("DndTest.Data.Model.CustomFields.CustomFieldCondition", b =>
                {
                    b.Navigation("RequiredOptions");
                });

            modelBuilder.Entity("DndTest.Data.Model.Content.Folder", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
